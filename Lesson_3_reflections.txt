When would you want to use a remote repository rather than keeping all your work
local?

I would want to use a remote repository if I wanted to share my work that I'm proud of with others online. Also, I would definitely want to use a remote repository if I am working with others on a project. Using the remote repository would let me invite others to collaborate with me, giving them access to view and contribute to it. 

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

There may have been changes made that could negatively affect the whole project, and you wouldn't want to pull this material because you want your local repository to keep running well. You want to review all new changes before you are ready to pull it.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Fork is used when you want to make a copy of another repository directly on GitHub servers without pulling down to your local machine first. Clone is used when you want to create a local copy of a repository on your computer so that you can sync between both the local and remote locations of your repository. Branches are created as temporary places to work through a new feature or debug with the intent to merge the branch with the origin.

What is the benefit of having a copy of the last known state of the remote
stored locally?
    
If you are going somewhere w/out Internet access, you can update a local copy before you leave. This way, you will know      the current state of the remote, continue to work and make changes, and then perform the merge while still offline.
 
    
How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

To collaborate w/out Git or GitHub, I would probably choose some sort of shared folder like on Google Drive. It would be less complicated, but problems could occur if we were all making changes to the same files at the same time. Using Git or GitHub takes time to learn and can get pretty complex, but at least I wouldn't have to worry about someone introducing a bug to code I worked on without me knowing. Also, I don't know of any other real-time collaborative editors that are specifically good for code.
 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

Making changes in a separate branch is good if you are working in a group and want everyone to agree to changes before      they are added to the master branch. If you are working on a solo project, you can use a seperate branch to experiment      without having to worry if it will mess up your entire project or just to see if the experimental changes will work.
 
